import { Textures } from '../client/src/textures.js'
import Block from './block.js'
import { ART_SCALE } from './constants.js'
import Level from './level.js'
import Tile from './tile.js'

const textureMap = {
  0: null,
  1: Textures.tiles.rocks,
  2: Textures.tiles.stone,
  3: Textures.tiles.gravel,
  4: Textures.object.mushroom,
  5: Textures.particle.fire1,
  6: Textures.particle.fire2,
}

export const generateSampleLevel = () => {
  const level = new Level()
  const Tiles = {
    DoorRightTop: [
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
      [2, 1, 1, 3, 3, 3, 3, 1, 1, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 1],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],
    DoorLeft: [
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [2, 1, 1, 1, 1, 1, 1, 1, 1, 2],
      [1, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],
    DoorRightBottom: [
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [2, 1, 1, 1, 1, 1, 1, 1, 1, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 1],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
    ],
    DoorRightTopBottom: [
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
      [2, 1, 1, 3, 3, 3, 3, 1, 1, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 1],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
    ],
    DoorLeftTop: [
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
      [2, 1, 1, 3, 3, 3, 3, 1, 1, 2],
      [1, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],
    DoorLeftTopBottom: [
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
      [2, 1, 1, 3, 3, 3, 3, 1, 1, 2],
      [1, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
    ],
    DoorLeftRightTop: [
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
      [2, 1, 1, 3, 3, 3, 3, 1, 1, 2],
      [1, 3, 3, 3, 3, 3, 3, 3, 3, 1],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],
    DoorLeftBottom: [
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [2, 1, 1, 1, 1, 1, 1, 1, 1, 2],
      [1, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
    ],
    DoorLeftRightBottom: [
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [2, 1, 1, 1, 1, 1, 1, 1, 1, 2],
      [1, 3, 3, 3, 3, 3, 3, 3, 3, 1],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
    ],
    DoorTop: [
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
      [2, 1, 1, 3, 3, 3, 3, 1, 1, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],
    HallwayVertical: [
      [1, 1, 2, 3, 3, 3, 3, 2, 1, 1],
      [0, 0, 2, 3, 3, 3, 3, 2, 0, 0],
      [0, 0, 2, 3, 3, 3, 3, 2, 0, 0],
      [0, 0, 2, 3, 3, 3, 3, 2, 0, 0],
      [0, 0, 2, 3, 3, 3, 3, 2, 0, 0],
      [0, 0, 2, 3, 3, 3, 3, 2, 0, 0],
      [0, 0, 2, 3, 3, 3, 3, 2, 0, 0],
      [0, 0, 2, 3, 3, 3, 3, 2, 0, 0],
      [0, 0, 2, 3, 3, 3, 3, 2, 0, 0],
      [0, 0, 2, 3, 3, 3, 3, 2, 0, 0],
    ],
    HallwayHorizontal: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ],
    MushRoom: [
      [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
      [2, 1, 1, 1, 1, 1, 1, 1, 1, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, [3, 4], [3, 4], 3, 3, 3, 2],
      [2, 3, 3, 3, [3, 4], [3, 4], 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 3, 3, 3, 3, 3, 3, 3, 3, 2],
      [2, 2, 2, 3, 3, 3, 3, 2, 2, 2],
    ],
  }

  Object.entries(Tiles).forEach(([key, value]) => {
    Tiles[key] = {
      label: key,
      grid: value,
    }
  })

  const t = (config) => {
    const tile = new Tile(config.label)
    config.grid.forEach((row, y) => {
      row.forEach((n, x) => {
        const isWalkable = n === 3 || n.length
        const textures = n.length ? n.map(t => textureMap[t]) : [textureMap[n]]
        tile.setBlock(
          new Block({
            x,
            y,
            canWalk: isWalkable,
            canSeeThrough: isWalkable,
            canShootThrough: isWalkable,
            textures,
          })
        )
      })
    })
    return tile
  }

  level.tileGrid = [
    [t(Tiles.MushRoom)],
    [
      t(Tiles.DoorRightTopBottom),
      t(Tiles.HallwayHorizontal),
      t(Tiles.DoorLeftRightBottom),
      t(Tiles.HallwayHorizontal),
      t(Tiles.HallwayHorizontal),
      t(Tiles.DoorLeftBottom),
    ],
    [
      t(Tiles.DoorRightTopBottom),
      t(Tiles.DoorLeftRightBottom),
      t(Tiles.DoorLeftTop),
      t(Tiles.DoorRightBottom),
      t(Tiles.HallwayHorizontal),
      t(Tiles.DoorLeftTop),
    ],
    [
      t(Tiles.DoorRightTop),
      t(Tiles.DoorLeftRightTop),
      t(Tiles.HallwayHorizontal),
      t(Tiles.DoorLeftTopBottom),
    ],
    [null, null, null, t(Tiles.HallwayVertical)],
    [
      null,
      null,
      null,
      t(Tiles.DoorRightTop),
      t(Tiles.HallwayHorizontal),
      t(Tiles.DoorLeftRightBottom),
      t(Tiles.DoorLeft),
    ],
    [null, null, null, null, null, t(Tiles.DoorTop)],
  ]

  level.start = {
    x: 200 * ART_SCALE,
    y: 200 * ART_SCALE,
  }

  return level
}
