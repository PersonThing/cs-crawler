import fs from 'fs'
import path from 'path'
import chokidar from 'chokidar'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const soundsDir = path.join(__dirname, 'client/assets/sounds')
const outputFilePath = path.join(__dirname, 'shared/config/sounds.js')
const validExtensions = ['.m4a', '.mp3', '.wav'] // add more as needed

const generateSoundsTree = (dir, basePath) => {
  const result = {}
  const items = fs.readdirSync(dir)

  items.forEach((item) => {
    const itemPath = path.join(dir, item)
    const relativePath = path.join(basePath, item)
    const stat = fs.statSync(itemPath)

    if (stat.isDirectory()) {
      result[item] = generateSoundsTree(itemPath, relativePath)
    } else if (stat.isFile()) {
      const key = path.basename(item, path.extname(item))
      result[key] = relativePath.replace(/\\/g, '/')
    }
  })

  return result
}

const writeSoundsFile = () => {
  const soundsTree = generateSoundsTree(soundsDir, '/assets/sounds')
  const fileContent = `// THIS FILE IS GENERATED BY build-sounds.js
// If npm run dev is active, as files / folders change inside the sounds folder, this file will be regenerated
// Do not make changes here, they'll be blown away by the background watcher anyway

export const Sounds = ${JSON.stringify(soundsTree, null, 2)}\n`
  fs.writeFileSync(outputFilePath, fileContent)
  console.log('Sounds file regenerated.')
}

if (process.argv.includes('--watch')) {
  const watcher = chokidar.watch(soundsDir, {
    persistent: true,
    ignoreInitial: true,
    awaitWriteFinish: true,
  })

  watcher
    .on('add', writeSoundsFile)
    .on('change', writeSoundsFile)
    .on('unlink', writeSoundsFile)
    .on('addDir', writeSoundsFile)
    .on('unlinkDir', writeSoundsFile)

  writeSoundsFile()
  console.log('Watching for changes in sounds directory...')
} else {
  // Run once
  writeSoundsFile()
}
